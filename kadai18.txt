【プログラムの説明】
NODE構造体は次を指すNODEポインタnextと内容のdataで定義。
・create関数
データを引数にとり、NODE構造体の分メモリを確保してそれを指すポインタpを用意。
pの次はNULL、dataに引数を代入、pを返す。
・insert関数
NODEポインタp_next,p_objを引数として、p_nextの指す先をp_objに、p_objの指す先をもともとp_nextが指す先にしてp_nextの次にp_objを挿入。
・erase関数
NODEポインタpを引数として、pの指す先をptrに保存。ptrがNULLでなければ、pの指す先をptrの指す先(pの指す先が指す先)に変更。ptrの指す先をNULLにして消去。
ptrを返す.
・split関数
NODEポインタpを引数として、pの指す先がNULLでなければ、新しくヘッダを作ってpの次に挿入、pの指す先をNULLに変更してヘッダのポインタを返す。
NULLだったらNULLを返す。
・create関数
NODEポインタp1,p2を引数とする。p1_endにp1のポインタがNULLになるまで繰り返し移動し、代入。
p1_endの指す先をp2の指す先に変更し、p2の指す先をNULLに変更、p1を返す。
・main関数
ヘッダ1と1,2,3を要素にもつNODEをcreateで作成。insertを使ってリスト1を作成。表示。
ヘッダ2と4,5,6を要素にもつNODEをcreateで作成。insertを使ってリスト2を作成。表示。
ヘッダ1とヘッダ2から始まるリストを結合、表示。
要素2の次からsplitで分割。分割後の二つのリストを表示。
要素2で分割したリストから要素3を削除して表示。
【感想】
順番がごちゃごちゃになって少し困った。しっかり図や頭の中で想像しながらコーディングしていかないといけないと感じた。
ただの連結リストで困っていたら双方向リストはもっと困るだろうから基本の連結リストを正しく理解しておきたい。
今回freeしなかったけど、catとかでできてしまったいらないヘッダはいちいちfreeするのがいいのかわからないのでちょっと調べてみようと思う.
